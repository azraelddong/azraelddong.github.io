<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Reactor和Proactor</title>
    <link href="/2025/08/15/Reactor%E5%92%8CProactor/"/>
    <url>/2025/08/15/Reactor%E5%92%8CProactor/</url>
    
    <content type="html"><![CDATA[<h1 id="Reactor和Proactor网络模型"><a href="#Reactor和Proactor网络模型" class="headerlink" title="Reactor和Proactor网络模型"></a>Reactor和Proactor网络模型</h1><h2 id="Reactor-同步非阻塞模型"><a href="#Reactor-同步非阻塞模型" class="headerlink" title="Reactor 同步非阻塞模型"></a>Reactor 同步非阻塞模型</h2><h3 id="单Reactor-单进程-单线程"><a href="#单Reactor-单进程-单线程" class="headerlink" title="单Reactor 单进程&#x2F;单线程"></a>单Reactor 单进程&#x2F;单线程</h3><p><img src="/2025/08/15/Reactor%E5%92%8CProactor/1.png" alt="单Reactor单进程&#x2F;单线程图"></p><p>有3个对象：</p><ul><li>Reactor：监听连接请求和分发事件</li><li>Acceptor：建立连接</li><li>Handler：读写操作</li></ul><p>缺点：</p><ul><li>无法利用多核CPU性能</li><li>当Handler处理的时候，整个进程是没办法处理其它请求的，会造成响应延迟</li></ul><p>所以单Reactor 单进程&#x2F;单线程的方案只适合handler处理特快的应用场景。</p><h3 id="单Reactor-多线程-多进程"><a href="#单Reactor-多线程-多进程" class="headerlink" title="单Reactor 多线程&#x2F;多进程"></a>单Reactor 多线程&#x2F;多进程</h3><p><img src="/2025/08/15/Reactor%E5%92%8CProactor/3.png" alt="单Reactor 多线程&#x2F;多进程图"></p><p>引入来多线程的方式，可以充分利用多核CPU，但是也会有线程竞争资源的问题，所以在子线程处理完后结果发送给Handler的时候，需要加锁，因为涉及共享数据的问题。</p><h3 id="多Reactor-多进程-多线程"><a href="#多Reactor-多进程-多线程" class="headerlink" title="多Reactor 多进程&#x2F;多线程"></a>多Reactor 多进程&#x2F;多线程</h3><p><img src="/2025/08/15/Reactor%E5%92%8CProactor/4.png" alt="多Reactor 多进程&#x2F;多线程图"></p><p>优势：</p><ul><li>主线程和子线程分工明确，主线程负责新连接，子线程负责后续的处理</li><li>主线程只需要将新连接分发给子线程，子线程无须返回数据，直接就可以将子线程的结果返回给客户端</li></ul><p>大名鼎鼎的Netty和Memcache都是使用来多Rector 多线程的方式来实现的，Nginx使用的是多Rector 多进程的方式。</p><h2 id="Proactor-异步非阻塞模型"><a href="#Proactor-异步非阻塞模型" class="headerlink" title="Proactor 异步非阻塞模型"></a>Proactor 异步非阻塞模型</h2><p>Proactor采用的是异步I&#x2F;O模式，所以叫异步非阻塞模型</p><p>Proactor和Reactor的区别：</p><ul><li>Reactor同步非阻塞，感知的是<strong>就绪可读写事件</strong>，每次感知到有事件的时候，需要应用程序主动的调用read函数来读取，也就是应用程序主动将socket缓存中的数据拷贝到应用程序缓存中，这个过程是同步的，读完之后才能处理数据。</li><li>Proactor异步非阻塞，感知的是<strong>已完成事件</strong>，在发起异步读写请求的时候，系统内核会自动的处理好数据，这里的读写工作全部由系统内核来完成，并不需要像Reactor一样，应用程序主动调用read&#x2F;write来读写数据，系统内核处理好数据后，会主动通知应用来直接处理数据，也就是将socket缓存中的数据拷贝到应用程序缓存中是系统内核自动完成的。</li></ul><p>注意：</p><p>可惜的是，在Linux中的异步I&#x2F;O是不完善的，aio不是真正的系统内核级别支持的，是在用户空见模拟出来的。并且只支持本地文件的aio异步操作，不支持网络socket，所以linux的高性能网络模式都是使用的Reactor模式。</p><p>而windows有一整套aio的socket异步编程接口（<strong>IOCP</strong>），是系统内核级别实现的异步IO，因此在windows中可以使用Proactor模型方案。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I/O多路复用</title>
    <link href="/2025/08/15/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <url>/2025/08/15/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="select-poll-epoll-多路复用"><a href="#select-poll-epoll-多路复用" class="headerlink" title="select&#x2F;poll&#x2F;epoll 多路复用"></a>select&#x2F;poll&#x2F;epoll 多路复用</h1><h2 id="select-poll"><a href="#select-poll" class="headerlink" title="select&#x2F;poll"></a>select&#x2F;poll</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select实现多路复用的方式，就是将所有连接的socket放入到文件描述符集和中，调用select函数将文件描述符集和拷贝到内核中，通过遍历的方式来判断是否有事件发生。当检测到有事件发生时，会将socket标记成可读或可写，然后再将文件描述符集和拷贝到用户态，在用户态再遍历来判断哪些socket被标记成可读或可写。</p><p>这种方式会<strong>2次遍历文件描述符，一次在内核态，一次在用户态</strong>。</p><p><strong>select使用固定长度的Bitsmap，表示文件描述符</strong>，所以<strong>个数是有限制的</strong>，在linux中，默认长度是1024.</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>poll不再使用Bitsmap来表示文件描述符，而是使用动态数组，链表的方式来组织，突破的文件描述符的个数限制，但是还是<strong>限制于系统文件描述符的。</strong></p><p>所以不管是select还是poll，都是通过2次遍历来判断的，效率都很低。</p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>epoll在select和poll的基础上，做了以下优化：</p><ul><li>epoll在内核中使用来<strong>红黑树</strong>来跟踪所有待检测的文件描述字，把需要监控的socket加入到内核的红黑树中，所以select&#x2F;poll都是将全部的文件描述符都拷贝到内核中，而epoll在内核中维护来红黑树来保存所有待检测的socket，所以只需要传入一个待检测的socket就可以，减少来内核态和用户态之间的数据拷贝。</li><li>epoll使用来<strong>事件驱动的机制</strong>，内核中维护来一个<strong>链表来记录就绪事件</strong>，当有socket有事件的时候，就会加入到就绪事件链表中，当用户态调用的时候，只会返回就绪事件链表中的数据，而不是返回整个文件描述符集和</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>零拷贝</title>
    <link href="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <url>/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h1><h2 id="DMA控制器"><a href="#DMA控制器" class="headerlink" title="DMA控制器"></a>DMA控制器</h2><p>DMA控制器的出现可以解决在数据返回之前，cpu一直处于空置状态，非常浪费系统资源。</p><p>在没有DMA控制器之前的时候，<strong>CPU需要全程参与拷贝数据的过程，而且CPU不能做其它的事情</strong>，I&#x2F;O的过程是这样的：</p><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/1.png" alt="无DMA控制器图式"></p><p>有DMA控制器之后，<strong>CPU不再参与【将数据从磁盘控制器缓冲区拷贝到内核缓冲区的过程，这部分的过程都由DMA控制器负责】</strong>，I&#x2F;O的过程是这样的：</p><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/2.png" alt="有DMA控制器"></p><h2 id="传统的文件传输"><a href="#传统的文件传输" class="headerlink" title="传统的文件传输"></a>传统的文件传输</h2><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/3.png" alt="传统文件传输图"></p><p><strong>一共发生了4次上下文切换，和4次拷贝</strong>，无疑会浪费CPU资源，降低系统性能。</p><p>优化方案：<strong>减少上下文切换和拷贝次数</strong></p><h2 id="如何实现零拷贝"><a href="#如何实现零拷贝" class="headerlink" title="如何实现零拷贝"></a>如何实现零拷贝</h2><p>零拷贝方案有2种：</p><ul><li>mmap + write</li><li>sendfile</li></ul><h3 id="mmap-write"><a href="#mmap-write" class="headerlink" title="mmap + write"></a>mmap + write</h3><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/4.png" alt="mmap+write实现的零拷贝图"></p><p>mmap+write方案，<strong>减少了从内核态缓冲区拷贝到用户态缓冲区，用户态缓冲区拷贝再拷贝到内核态缓冲区的过程，直接在内核态中拷贝，减少了一次数据拷贝，还是4次上下文切换</strong>。</p><h3 id="sendfile（Kafka）"><a href="#sendfile（Kafka）" class="headerlink" title="sendfile（Kafka）"></a>sendfile（Kafka）</h3><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/5.png" alt="sendfile零拷贝图"></p><p>sendfile方案，<strong>只有2次上下文切换和3次拷贝</strong>，相比mmap+write方案，少了2次上下文切换，不需要用户态和内核态切换了。</p><p>如果网卡支持SG-DMA技术的话，还能继续优化，这才是真正的零拷贝方案：</p><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/6.png" alt="SG-DMA零拷贝图"></p><p>🌈 SG-DMA（<em>The Scatter-Gather Direct Memory Access</em>）方案，只有2次上线文切换和2次拷贝，内核态缓冲区只拷贝描述符和数据长度信息到socket缓冲区中，真正的数据通过SG-DMA直接从内核缓冲区拷贝到网卡中，全程没有CPU拷贝过程，CPU全程不参与，所有数据都是通过DMA控制器来操作的。</p><h2 id="大文件如何传输"><a href="#大文件如何传输" class="headerlink" title="大文件如何传输"></a>大文件如何传输</h2><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/1-5224127.png" alt="原始拷贝图"></p><p><strong>客户端在发起读请求后，会一直阻塞等待数据返回</strong>，如何文件数据特别大的时候，在将磁盘控制器缓冲区数据拷贝到Pagecache缓冲区中的步骤就会比较多余，因为PageCache文件太大了，直接将PageCache缓冲区给占满了，再次访问的概率会比较低，所以可以使用<strong>异步I&#x2F;O</strong>来解决。</p><p><img src="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/2-5224603.png" alt="异步IO图"></p><p>所以，在高并发场景，大文件传输的情景下，最好的方案是**【异步I&#x2F;O + 直接I&#x2F;O】**来代替零拷贝方案。</p><p>在nginx中的配置方案：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /video/&#123;<br><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">aio</span> <span class="hljs-literal">on</span>;<br>  <span class="hljs-attribute">directio</span> <span class="hljs-number">1024m</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当文件大于1024m的时候，使用异步I&#x2F;O+直接I&#x2F;O的方式替代sendfile零拷贝。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>零拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO群聊</title>
    <link href="/2025/08/14/NIO%E7%BE%A4%E8%81%8A/"/>
    <url>/2025/08/14/NIO%E7%BE%A4%E8%81%8A/</url>
    
    <content type="html"><![CDATA[<p><strong>使用NIO实现一个简易的群聊功能</strong></p><p>Server端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.netty.nio.chat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.Channel;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 聊天服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServerMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ChatServerMain</span> <span class="hljs-variable">chatServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatServerMain</span>();<br>        chatServer.listen();<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> Selector selector;<br>    <span class="hljs-keyword">private</span> ServerSocketChannel serverSocketChannel;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8899</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatServerMain</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocketChannel = ServerSocketChannel.open();<br>            serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>            serverSocketChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(port));<br><br>            selector = Selector.open();<br><br>            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); <span class="hljs-comment">// 连接事件</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听事件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 没有事件阻塞住</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<br>                <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 说明有事件发生</span><br>                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                        <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>                        <span class="hljs-keyword">if</span> (next.isAcceptable()) &#123;  <span class="hljs-comment">// OP_ACCEPT</span><br>                            <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> serverSocketChannel.accept();<br>                            socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>                            socketChannel.register(selector, SelectionKey.OP_READ);<br><br>                            System.out.println(<span class="hljs-string">&quot;客户端上线，address:&quot;</span> + socketChannel.getRemoteAddress());<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (next.isReadable()) &#123;    <span class="hljs-comment">// OP_READ</span><br>                            read(next);<br>                        &#125;<br><br>                        iterator.remove();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                serverSocketChannel.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(SelectionKey key)</span> &#123;<br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            channel = (SocketChannel) key.channel();<br><br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.read(buffer);<br><br>            <span class="hljs-keyword">if</span> (read &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer.array());<br>                System.out.println(<span class="hljs-string">&quot;发送的消息：&quot;</span> + msg);<br><br>                <span class="hljs-comment">// 转发消息</span><br>                sendOther(msg, channel);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(channel.getRemoteAddress() + <span class="hljs-string">&quot; 离线了....&quot;</span>);<br>                    channel.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                    ex.printStackTrace();<br>                &#125;<br>            &#125;<br>            key.cancel();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转发消息，排除自身</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOther</span><span class="hljs-params">(String msg, SocketChannel self)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Set&lt;SelectionKey&gt; keys = selector.keys();<br>        <span class="hljs-keyword">for</span> (SelectionKey key : keys) &#123;<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> key.channel();<br>            <span class="hljs-keyword">if</span> (channel <span class="hljs-keyword">instanceof</span> SocketChannel &amp;&amp; channel != self) &#123;<br>                <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> (SocketChannel) channel;<br>                <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(msg.getBytes());<br><br>                socketChannel.write(buffer);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Client端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.netty.nio.chat;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 聊天客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClientMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ChatClientMain</span> <span class="hljs-variable">chatClientMain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatClientMain</span>();<br><br>        <span class="hljs-comment">// 每隔3s读取一次通道信息</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                chatClientMain.receive();<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3_000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (scanner.hasNextLine()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>            chatClientMain.send(msg);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8899</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">private</span> SocketChannel socketChannel;<br>    <span class="hljs-keyword">private</span> Selector selector;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChatClientMain</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socketChannel = SocketChannel.open(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(host, port));<br>            socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>            selector = Selector.open();<br><br>            socketChannel.register(selector, SelectionKey.OP_READ);<br><br>            username = socketChannel.getLocalAddress().toString().substring(<span class="hljs-number">1</span>);<br>            System.out.println(username + <span class="hljs-string">&quot;is ok....&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String msg)</span> &#123;<br>        msg = username + <span class="hljs-string">&quot;说：&quot;</span> + msg;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(msg.getBytes());<br>        <span class="hljs-keyword">try</span> &#123;<br>            socketChannel.write(buffer);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 没有事件阻塞住</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<br>            <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>                    <span class="hljs-keyword">if</span> (next.isReadable()) &#123;    <span class="hljs-comment">// OP_READ</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (SocketChannel) next.channel();<br>                        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span>);<br>                        channel.read(buffer);<br>                        System.out.println(<span class="hljs-string">&quot;接收到消息：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer.array()));<br>                    &#125;<br>                    iterator.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
    
    
    <categories>
      
      <category>NIO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习</title>
    <link href="/2025/08/12/netty/"/>
    <url>/2025/08/12/netty/</url>
    
    <content type="html"><![CDATA[<h1 id="Netty学习"><a href="#Netty学习" class="headerlink" title="Netty学习"></a>Netty学习</h1><p>Netty是一个<strong>异步的，基于事件驱动</strong>的网络框架。</p><p>书籍推荐：</p><ul><li>netty in action（偏实战）</li><li>netty权威指南（netty5理论）</li></ul><h2 id="BIO、NIO"><a href="#BIO、NIO" class="headerlink" title="BIO、NIO"></a>BIO、NIO</h2><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><p>阻塞IO实现服务端ServerSocket服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阻塞io服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockIoMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br><br>        <span class="hljs-comment">// 服务端ServerSocket服务</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">7777</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;服务器连接.....&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>            System.out.println(<span class="hljs-string">&quot;客户端已连接....&quot;</span>);<br><br>            executorService.execute(() -&gt; &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前线程id：&quot;</span> + Thread.currentThread().getId() + <span class="hljs-string">&quot;，线程名称：&quot;</span> + Thread.currentThread().getName());<br>                handler(socket);<br>            &#125;);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handler</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-keyword">try</span> (socket) &#123;<br>            <span class="hljs-comment">// 读取</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;当前线程id：&quot;</span> + Thread.currentThread().getId() + <span class="hljs-string">&quot;，线程名称：&quot;</span> + Thread.currentThread().getName());<br>                <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> is.read(bytes);<br>                <span class="hljs-comment">// 🌈结束返回-1</span><br>                <span class="hljs-keyword">if</span> (read == -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, read));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端使用telnet进行连接</p><p><img src="/2025/08/12/netty/image-20250812161413186.png" alt="image-telnet连接服务端命令"></p><p>执行结果：</p><p><img src="/2025/08/12/netty/image-20250812161457946.png" alt="image-结果"></p><p>结论：</p><p>每次新的客户端连接的时候，服务端都会新起一个线程进行读写处理，严重浪费服务器资源和增加CPU系统开销；而且连接后，没有数据读写的时候，会阻塞住，还不会释放服务端资源，造成系统资源浪费；</p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><p>NIO中三个非常重要的组件：</p><ul><li>Channel：通道</li><li>Buffer：缓冲区</li><li>Selector：选择器</li></ul><p><strong>NIO连接关系：客户端 &#x3D;&#x3D;&gt; buffer缓冲区 &lt;&#x3D;&#x3D;&gt; Channel通道 &#x3D;&#x3D;&gt; Selector选择器</strong></p><ul><li>每个client都对应一个buffer缓冲区</li><li>buffer缓冲器和channel通道双向连接</li><li>channel通道注册到selector选择器</li><li>selector选择器选择哪个通道是由**事件（Event）**来决定的</li></ul><p>缓冲器（Buffer）读写测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.netty.nio;<br><br><span class="hljs-keyword">import</span> java.nio.IntBuffer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通道读写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicNioMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IntBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> IntBuffer.allocate(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; buffer.capacity(); i++) &#123;<br>            buffer.put(i * <span class="hljs-number">2</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 🌈读写转换必要的！！！</span><br>        buffer.flip();<br><br>        <span class="hljs-keyword">while</span> (buffer.hasRemaining()) &#123;<br>            System.out.println(buffer.get());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2025/08/12/netty/image-20250812171744045.png" alt="通道读写结果"></p><h4 id="Buffer缓冲区"><a href="#Buffer缓冲区" class="headerlink" title="Buffer缓冲区"></a>Buffer缓冲区</h4><p>Buffer父类中有4个重要的字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> limit;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;<br></code></pre></td></tr></table></figure><h4 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h4><p>1.文件读取示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.netty.nio;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReadWriteNioMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/Users/apple/Downloads/a.txt&quot;</span>);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;/Users/apple/Downloads/b.txt&quot;</span>);<br><br>        <span class="hljs-type">FileChannel</span> <span class="hljs-variable">inChannel</span> <span class="hljs-operator">=</span> is.getChannel();<br>        <span class="hljs-type">FileChannel</span> <span class="hljs-variable">outChannel</span> <span class="hljs-operator">=</span> os.getChannel();<br><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">30</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-comment">// 🌈特别重要！！！！一定要复位，不然会一直输出0</span><br>            buffer.clear();<br><br>            <span class="hljs-comment">// 读取</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> inChannel.read(buffer);<br>            System.out.println(<span class="hljs-string">&quot;read = &quot;</span> + read);<br>            <span class="hljs-keyword">if</span> (read == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 缓冲区反转</span><br>            buffer.flip();<br><br>            <span class="hljs-comment">// 写入</span><br>            outChannel.write(buffer);<br>        &#125;<br><br>        is.close();<br>        os.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 循环读取文件中的数据的时候，每次必须要复位不然，会有严重的bug</p><p>正常的情况，是可以正常结束的；</p><p>但是如果不复位的情况下，会死循环打印0，程序也结束不了。</p><p><img src="/2025/08/12/netty/image-20250813115308065.png" alt="不复位的结果图"></p><p>2.可以使用transfrom和transto方法进行拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.netty.nio;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTransNioMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;/Users/apple/Downloads/a2.txt&quot;</span>);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/Users/apple/Downloads/a.txt&quot;</span>);<br><br>        <span class="hljs-type">FileChannel</span> <span class="hljs-variable">inChannel</span> <span class="hljs-operator">=</span> is.getChannel();<br>        <span class="hljs-type">FileChannel</span> <span class="hljs-variable">outChannel</span> <span class="hljs-operator">=</span> os.getChannel();<br><br>        outChannel.transferFrom(inChannel, <span class="hljs-number">0</span>, inChannel.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>transferFrom(ReadableByteChannel channel, long position, long count)</p><p>transTo(long position, long count, WriteableByteChannel channel)</p><ul><li>Channel ：来源通道</li><li>position：起始位置</li><li>count：读取的个数</li></ul><p>3.MappedByteBuffer：可以直接在堆外内存修改内容，不需要拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.netty.nio;<br><br><span class="hljs-keyword">import</span> java.io.RandomAccessFile;<br><span class="hljs-keyword">import</span> java.nio.MappedByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappedByteBufferMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">randomAccessFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;/Users/apple/Downloads/a.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br><br>        <span class="hljs-type">FileChannel</span> <span class="hljs-variable">fileChannel</span> <span class="hljs-operator">=</span> randomAccessFile.getChannel();<br><br>        <span class="hljs-type">MappedByteBuffer</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> fileChannel.map(FileChannel.MapMode.READ_WRITE, <span class="hljs-number">0</span>, fileChannel.size());<br><br>        <span class="hljs-comment">// 修改下标是0的字节</span><br>        map.put(<span class="hljs-number">0</span>, (<span class="hljs-type">byte</span>) <span class="hljs-string">&#x27;H&#x27;</span>);<br><br>        randomAccessFile.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h4><p>Selector可以注册多个通道，通过事件（event）来决定来使用哪个通道。</p><p>Selector中保存了SelectionKey集和，而SelectionKey中保存了监听的通道信息和监听的类型（OP_ACCEPT、OP_CONNECT、OP_READ、OP_WRITE）</p><p>常用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<span class="hljs-comment">// 开启selector</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<span class="hljs-comment">// 选择器监听的通道有事件发生的个数，没有事件就会一直阻塞住</span><br><br>Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<span class="hljs-comment">// 选择器中有事件发生的通道对应的key</span><br><br>Set&lt;SelectionKey&gt; keys = selector.keys();<span class="hljs-comment">// 选择器上所有通道对应的keys，不管是否有事件发生</span><br><br><br></code></pre></td></tr></table></figure><p>NIO实现的简易群聊功能：<a href="/2025/08/14/NIO%E7%BE%A4%E8%81%8A/" title="NIO群聊">NIO群聊</a></p><h4 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h4><p>两种零拷贝：mmap和sendfile</p><p>具体原理详解：<a href="/2025/08/14/%E9%9B%B6%E6%8B%B7%E8%B4%9D/" title="零拷贝">零拷贝</a></p>]]></content>
    
    
    <categories>
      
      <category>netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>english</title>
    <link href="/2025/07/25/english/"/>
    <url>/2025/07/25/english/</url>
    
    <content type="html"><![CDATA[<ul><li><p><strong>exhaust</strong>                 vt. 耗尽，排空  n. 废气，排气</p></li><li><p><strong>hijack</strong>            v. 劫持，操纵 n. 劫持；敲诈</p></li><li><p><strong>republican</strong>                    adj. 共和国的，共和党的  n. 共和党员</p></li><li><p><strong>release</strong>                          v.释放，排放（气体）；发泄（情感）；放开，松开；发布，发行；免除（责任）；</p><p>​                                   n.释放，排放；发布声明；免除（责任）；解脱</p></li><li><p><strong>ridiculous</strong>                      adj.好笑的，荒谬的，愚蠢的</p></li><li><p><strong>manipulate</strong>                   vt.操纵，影响；v. 【财】操纵</p></li><li><p><strong>addition</strong>                         n.加法；附加物；e.g in addition to 除了 ……之外</p></li><li><p><strong>recreation</strong>                     n.娱乐活动；消遣；（身心）修养</p></li><li><p><strong>melody</strong>                          n.（音乐）旋律</p></li><li><p><strong>accommodation</strong>          n.住宿，住处；调解；适应</p></li><li><p><strong>glacier</strong>                            n.冰川，冰河</p></li><li><p><strong>glacial</strong>                            adj.冰川形成的</p></li><li><p><strong>tie</strong>                                    n.联系，关系，纽带；领带；平局；束缚</p></li></ul><p>​         v.打成平局，得分相同；打结；捆绑；使紧密结合 </p><ul><li><strong>fracture</strong>                          v.使骨折，折断；n.骨折；折断；裂口</li><li><strong>crack</strong>                               v.打碎；断裂，折断；n.裂缝；裂缝声；挖苦话；adj.优秀的，一流的；adv.尖锐的</li><li><strong>benevolent</strong>                      adj.乐善好施的；慈爱的，仁慈的</li></ul>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考验英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle-tools</title>
    <link href="/2025/07/22/oracle-tools/"/>
    <url>/2025/07/22/oracle-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="oracle小技巧"><a href="#oracle小技巧" class="headerlink" title="oracle小技巧"></a>oracle小技巧</h1><p>在oracle中，有一些命令执行效率非常高</p><ul><li>inset int ….. select … from table：将查询表的数据直接插入到对应表中</li></ul><p>实测备份库25w左右的数据（包含大字段），执行上面的命令花费不到10s的时间，可以有效进行表之间的数据备份</p><ul><li>CREATE TABLE … AS SELECT … ：创建表并备份数据</li></ul><p>创建表和字段名称来备份查询的数据库表数据，效率提升非常高</p><p>1.简单表备份</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> employees_copy<br>NOLOGGING<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p>2.备份部分数据并使用并行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> recent_orders<br>PARALLEL <span class="hljs-number">8</span><br>NOLOGGING<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">WHERE</span> order_date <span class="hljs-operator">&gt;=</span> <span class="hljs-type">DATE</span> <span class="hljs-string">&#x27;2023-01-01&#x27;</span>;<br></code></pre></td></tr></table></figure><p>3.创建表并自定义列名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> product_info (<br>    id NUMBER,<br>    name VARCHAR2(<span class="hljs-number">100</span>),<br>    price NUMBER<br>)<br>PARALLEL <span class="hljs-number">4</span><br>NOLOGGING<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> product_id,<br>       product_name,<br>       list_price<br><span class="hljs-keyword">FROM</span> products;<br></code></pre></td></tr></table></figure><ul><li>TRUNCATE table ：清空表数据语句（慎用⭐️）</li><li>修改表字段命令（有数据的情况下）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-comment">/*修改原字段名name为name_tmp*/</span><br><span class="hljs-keyword">alter table</span> MO_ENTITY_INVOICE_ITEM rename <span class="hljs-keyword">column</span> EII_ID <span class="hljs-keyword">to</span> EII_ID_T;<br><span class="hljs-comment">/*增加一个和原字段名同名的字段name*/</span><br><span class="hljs-keyword">alter table</span> MO_ENTITY_INVOICE_ITEM <span class="hljs-keyword">add</span> EII_ID varchar2(<span class="hljs-number">50</span>);<br><span class="hljs-comment">/*将原字段name_tmp数据更新到增加的字段name*/</span><br><span class="hljs-keyword">update</span> MO_ENTITY_INVOICE_ITEM  <span class="hljs-keyword">set</span> EII_ID<span class="hljs-operator">=</span><span class="hljs-built_in">trim</span>(EII_ID_T);<br><span class="hljs-comment">/*更新完，删除原字段name_tmp*/</span><br><span class="hljs-keyword">alter table</span> MO_ENTITY_INVOICE_ITEM <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> EII_ID_T<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis源码解析</title>
    <link href="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis源码解析"><a href="#MyBatis源码解析" class="headerlink" title="MyBatis源码解析"></a>MyBatis源码解析</h1><h2 id="MyBatis是什么？"><a href="#MyBatis是什么？" class="headerlink" title="MyBatis是什么？"></a>MyBatis是什么？</h2><p>MyBatis是一款优秀的持久层框架，支持<strong>定制化SQL、存储过程以及高级映射</strong>。MyBatis避免了几乎所有的jdbc代码和手动设置参数和获取结果集。</p><h2 id="为什么要使用MyBatis？"><a href="#为什么要使用MyBatis？" class="headerlink" title="为什么要使用MyBatis？"></a>为什么要使用MyBatis？</h2><p>1、减轻jdbc复杂性，不用编写重复的代码</p><p>2、处理简单，让开发者更加专注sql的处理</p><h2 id="MYBATIS执行器和处理器"><a href="#MYBATIS执行器和处理器" class="headerlink" title="MYBATIS执行器和处理器"></a>MYBATIS执行器和处理器</h2><h3 id="执行器（Executor）"><a href="#执行器（Executor）" class="headerlink" title="执行器（Executor）"></a>执行器（Executor）</h3><ul><li>SimpleExecutor：普通执行器</li><li>ReuseExecutor：重复利用执行器</li><li>BatchExecutor：批处理执行器</li></ul><h3 id="处理器（Handler）"><a href="#处理器（Handler）" class="headerlink" title="处理器（Handler）"></a>处理器（Handler）</h3><ul><li>SimpleStatementHandler：普通处理器</li><li>PrepareStatementHandler：预编译处理器</li><li>CallableStatementHandler：存储过程处理器</li></ul><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>mybatis一级缓存中有两种级别，session级别和statement级别，session级别的一级缓存可能会出现脏读的情况，所以推荐使用statement级别。</p><p>1.开启一级缓存，缓存级别是session级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">firstCacheTest1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">studentMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(StudentMapper.class);<br><br>    log.info(<span class="hljs-string">&quot;===============&gt; student:&#123;&#125;&quot;</span>, studentMapper.queryById(<span class="hljs-number">1</span>));<br>    log.info(<span class="hljs-string">&quot;===============&gt; student:&#123;&#125;&quot;</span>, studentMapper.queryById(<span class="hljs-number">1</span>));<br>    log.info(<span class="hljs-string">&quot;===============&gt; student:&#123;&#125;&quot;</span>, studentMapper.queryById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：走了一级缓存</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250729171834220.png" alt="image-20250729171834220"></p><p>2.开启一级缓存，SESSION级别缓存，中间有更新操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">firstCacheTest2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">studentMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(StudentMapper.class);<br><br>    log.info(<span class="hljs-string">&quot;===============&gt; student:&#123;&#125;&quot;</span>, studentMapper.queryById(<span class="hljs-number">1</span>));<br>    studentMapper.updateById(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;李斯&quot;</span>);<br><br>    log.info(<span class="hljs-string">&quot;===============&gt; student:&#123;&#125;&quot;</span>, studentMapper.queryById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：执行更新操作后，一级缓存失效</p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250729172019023.png" alt="image-20250729172019023" style="zoom:150%;"><p>3.开启两个session会话，其中一个会话更改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">firstCacheTest3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">sm1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(StudentMapper.class);<br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">sm2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(StudentMapper.class);<br><br>    log.info(<span class="hljs-string">&quot;===============&gt; student1:&#123;&#125;&quot;</span>, sm1.queryById(<span class="hljs-number">1</span>));<br>    log.info(<span class="hljs-string">&quot;===============&gt; student2:&#123;&#125;&quot;</span>, sm2.queryById(<span class="hljs-number">1</span>));<br><br>    sm1.updateById(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;周五&quot;</span>);<br><br>    log.info(<span class="hljs-string">&quot;===============&gt; student1:&#123;&#125;&quot;</span>, sm1.queryById(<span class="hljs-number">1</span>));<br>    log.info(<span class="hljs-string">&quot;===============&gt; student2:&#123;&#125;&quot;</span>, sm2.queryById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：两个session会话互不影响，session1执行更改操作后，一级缓存失效，session2还是正常走一级缓存，这种情况就会出现脏读情况。</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250729172517955.png" alt="image-20250729172517955"></p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>开启二级缓存</p><p>1.开启二级缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;setting name=<span class="hljs-string">&quot;cacheEnabled&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>2.mapper文件中加入二级缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;cache/&gt;<br></code></pre></td></tr></table></figure><p><strong>使用cache-ref标签表示引用别的命名空见的cache配置，两个命名空见的操作使用的是同一个cache.</strong></p><blockquote><p>🌈注意：但是一个命令空间的配置文件千万不要同时配置cache和cache-ref两个标签，因为会根据加载顺序的问题导致独享缓存还是共享缓存不一定！！！</p></blockquote><p><strong>实验1:</strong></p><p>测试二级缓存，不提交事务，两个查询是否会走缓存？？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secondCacheTest1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> s1.getMapper(StudentMapper.class);<br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> s2.getMapper(StudentMapper.class);<br><br>    log.info(<span class="hljs-string">&quot;======&gt; mapper1:&#123;&#125;&quot;</span>, mapper1.queryById(<span class="hljs-number">1</span>));<br>    log.info(<span class="hljs-string">&quot;======&gt; mapper2:&#123;&#125;&quot;</span>, mapper2.queryById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：mapper1事务没有提交，没有走二级缓存。</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250804102540851.png" alt="image-二级缓存没有提交事务结果"></p><p><strong>实验2:</strong></p><p>测试二级缓存，提交事务，两个查询是否会走缓存？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secondCacheTest1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> s1.getMapper(StudentMapper.class);<br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> s2.getMapper(StudentMapper.class);<br><br>    log.info(<span class="hljs-string">&quot;======&gt; mapper1:&#123;&#125;&quot;</span>, mapper1.queryById(<span class="hljs-number">1</span>));<br>    s1.commit();<br>    log.info(<span class="hljs-string">&quot;======&gt; mapper2:&#123;&#125;&quot;</span>, mapper2.queryById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：mapper1事务提交后，走了二级缓存</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250804102425743.png" alt="image-二级缓存事务提交后结果"></p><p><strong>实验3:</strong></p><p>两个实体，不使用cache-ref的情况下，更改其中一个实体的属性后提交，是否会走缓存？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secondCacheTest2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session1</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session2</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session3</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">studentMapper</span> <span class="hljs-operator">=</span> session1.getMapper(StudentMapper.class);<br>    <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">studentMapper2</span> <span class="hljs-operator">=</span> session2.getMapper(StudentMapper.class);<br>    <span class="hljs-type">OrderMapper</span> <span class="hljs-variable">orderMapper</span> <span class="hljs-operator">=</span> session3.getMapper(OrderMapper.class);<br><br>    log.info(<span class="hljs-string">&quot;=====&gt; studentMapper:&#123;&#125;&quot;</span>, studentMapper.queryById(<span class="hljs-number">1</span>));<br>    session1.close();<br>    log.info(<span class="hljs-string">&quot;=====&gt; studentMapper:&#123;&#125;&quot;</span>, studentMapper2.queryById(<span class="hljs-number">1</span>));<br><br>    orderMapper.updateById(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>));<br>    session3.commit();<br>    log.info(<span class="hljs-string">&quot;=====&gt; studentMapper:&#123;&#125;&quot;</span>, studentMapper2.queryById(<span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：不使用cache-ref的情况下，即使做了更新操作并提交，也会继续走缓存！！！</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250804105633154.png" alt="image-二级缓存没有使用cache-ref"></p><p><strong>实验4:</strong></p><p>两个实体，在实体的配置文件中使用cache-ref的情况下，更改其中一个实体的属性后提交，是否会走缓存？</p><p>结论：使用cache-ref标签后，将两个实体合并成一个cache，所以有更新操作后，不会再走缓存。</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250804105935423.png" alt="image-二级缓存使用了cache-ref"></p><blockquote><p>🌈注意：使用cache-ref的后果就是缓存的粒度变粗了，多个mapper下的所有操作都会对缓存使用造成影响。</p></blockquote><h2 id="MyBatis解析配置文件"><a href="#MyBatis解析配置文件" class="headerlink" title="MyBatis解析配置文件"></a>MyBatis解析配置文件</h2><h2 id="了解mybatis-spring-boot-starter实现原理源码解析"><a href="#了解mybatis-spring-boot-starter实现原理源码解析" class="headerlink" title="了解mybatis-spring-boot-starter实现原理源码解析"></a>了解mybatis-spring-boot-starter实现原理源码解析</h2><h3 id="1、mybatis自动配置类-MybatisAutoConfiguration"><a href="#1、mybatis自动配置类-MybatisAutoConfiguration" class="headerlink" title="1、mybatis自动配置类 MybatisAutoConfiguration"></a>1、mybatis自动配置类 MybatisAutoConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.springframework.context.annotation.Configuration<br><span class="hljs-meta">@ConditionalOnClass(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnSingleCandidate(DataSource.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(MybatisProperties.class)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisAutoConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MybatisAutoConfiguration.class);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MybatisProperties properties;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Interceptor[] interceptors;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeHandler[] typeHandlers;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LanguageDriver[] languageDrivers;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResourceLoader resourceLoader;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DatabaseIdProvider databaseIdProvider;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ConfigurationCustomizer&gt; configurationCustomizers;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MybatisAutoConfiguration</span><span class="hljs-params">(MybatisProperties properties, ObjectProvider&lt;Interceptor[]&gt; interceptorsProvider,</span><br><span class="hljs-params">      ObjectProvider&lt;TypeHandler[]&gt; typeHandlersProvider, ObjectProvider&lt;LanguageDriver[]&gt; languageDriversProvider,</span><br><span class="hljs-params">      ResourceLoader resourceLoader, ObjectProvider&lt;DatabaseIdProvider&gt; databaseIdProvider,</span><br><span class="hljs-params">      ObjectProvider&lt;List&lt;ConfigurationCustomizer&gt;&gt; configurationCustomizersProvider)</span> &#123;<br>    <span class="hljs-built_in">this</span>.properties = properties;<br>    <span class="hljs-built_in">this</span>.interceptors = interceptorsProvider.getIfAvailable();<br>    <span class="hljs-built_in">this</span>.typeHandlers = typeHandlersProvider.getIfAvailable();<br>    <span class="hljs-built_in">this</span>.languageDrivers = languageDriversProvider.getIfAvailable();<br>    <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    <span class="hljs-built_in">this</span>.databaseIdProvider = databaseIdProvider.getIfAvailable();<br>    <span class="hljs-built_in">this</span>.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>    checkConfigFileExists();<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkConfigFileExists</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.isCheckConfigLocation() &amp;&amp; StringUtils.hasText(<span class="hljs-built_in">this</span>.properties.getConfigLocation())) &#123;<br>      <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resourceLoader.getResource(<span class="hljs-built_in">this</span>.properties.getConfigLocation());<br>      Assert.state(resource.exists(),<br>          <span class="hljs-string">&quot;Cannot find config location: &quot;</span> + resource + <span class="hljs-string">&quot; (please add config file or check your Mybatis configuration)&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@ConditionalOnMissingBean</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>    factory.setDataSource(dataSource);<br>    factory.setVfs(SpringBootVFS.class);<br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-built_in">this</span>.properties.getConfigLocation())) &#123;<br>      factory.setConfigLocation(<span class="hljs-built_in">this</span>.resourceLoader.getResource(<span class="hljs-built_in">this</span>.properties.getConfigLocation()));<br>    &#125;<br>    applyConfiguration(factory);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.getConfigurationProperties() != <span class="hljs-literal">null</span>) &#123;<br>      factory.setConfigurationProperties(<span class="hljs-built_in">this</span>.properties.getConfigurationProperties());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(<span class="hljs-built_in">this</span>.interceptors)) &#123;<br>      factory.setPlugins(<span class="hljs-built_in">this</span>.interceptors);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.databaseIdProvider != <span class="hljs-literal">null</span>) &#123;<br>      factory.setDatabaseIdProvider(<span class="hljs-built_in">this</span>.databaseIdProvider);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (StringUtils.hasLength(<span class="hljs-built_in">this</span>.properties.getTypeAliasesPackage())) &#123;<br>      factory.setTypeAliasesPackage(<span class="hljs-built_in">this</span>.properties.getTypeAliasesPackage());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties.getTypeAliasesSuperType() != <span class="hljs-literal">null</span>) &#123;<br>      factory.setTypeAliasesSuperType(<span class="hljs-built_in">this</span>.properties.getTypeAliasesSuperType());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (StringUtils.hasLength(<span class="hljs-built_in">this</span>.properties.getTypeHandlersPackage())) &#123;<br>      factory.setTypeHandlersPackage(<span class="hljs-built_in">this</span>.properties.getTypeHandlersPackage());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(<span class="hljs-built_in">this</span>.typeHandlers)) &#123;<br>      factory.setTypeHandlers(<span class="hljs-built_in">this</span>.typeHandlers);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(<span class="hljs-built_in">this</span>.properties.resolveMapperLocations())) &#123;<br>      factory.setMapperLocations(<span class="hljs-built_in">this</span>.properties.resolveMapperLocations());<br>    &#125;<br>    Set&lt;String&gt; factoryPropertyNames = Stream<br>        .of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanWrapperImpl</span>(SqlSessionFactoryBean.class).getPropertyDescriptors()).map(PropertyDescriptor::getName)<br>        .collect(Collectors.toSet());<br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LanguageDriver</span>&gt; defaultLanguageDriver = <span class="hljs-built_in">this</span>.properties.getDefaultScriptingLanguageDriver();<br>    <span class="hljs-keyword">if</span> (factoryPropertyNames.contains(<span class="hljs-string">&quot;scriptingLanguageDrivers&quot;</span>) &amp;&amp; !ObjectUtils.isEmpty(<span class="hljs-built_in">this</span>.languageDrivers)) &#123;<br>      <span class="hljs-comment">// Need to mybatis-spring 2.0.2+</span><br>      factory.setScriptingLanguageDrivers(<span class="hljs-built_in">this</span>.languageDrivers);<br>      <span class="hljs-keyword">if</span> (defaultLanguageDriver == <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.languageDrivers.length == <span class="hljs-number">1</span>) &#123;<br>        defaultLanguageDriver = <span class="hljs-built_in">this</span>.languageDrivers[<span class="hljs-number">0</span>].getClass();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (factoryPropertyNames.contains(<span class="hljs-string">&quot;defaultScriptingLanguageDriver&quot;</span>)) &#123;<br>      <span class="hljs-comment">// Need to mybatis-spring 2.0.2+</span><br>      factory.setDefaultScriptingLanguageDriver(defaultLanguageDriver);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> factory.getObject();<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyConfiguration</span><span class="hljs-params">(SqlSessionFactoryBean factory)</span> &#123;<br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.properties.getConfiguration();<br>    <span class="hljs-keyword">if</span> (configuration == <span class="hljs-literal">null</span> &amp;&amp; !StringUtils.hasText(<span class="hljs-built_in">this</span>.properties.getConfigLocation())) &#123;<br>      configuration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (configuration != <span class="hljs-literal">null</span> &amp;&amp; !CollectionUtils.isEmpty(<span class="hljs-built_in">this</span>.configurationCustomizers)) &#123;<br>      <span class="hljs-keyword">for</span> (ConfigurationCustomizer customizer : <span class="hljs-built_in">this</span>.configurationCustomizers) &#123;<br>        customizer.customize(configuration);<br>      &#125;<br>    &#125;<br>    factory.setConfiguration(configuration);<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@ConditionalOnMissingBean</span><br>  <span class="hljs-keyword">public</span> SqlSessionTemplate <span class="hljs-title function_">sqlSessionTemplate</span><span class="hljs-params">(SqlSessionFactory sqlSessionFactory)</span> &#123;<br>    <span class="hljs-type">ExecutorType</span> <span class="hljs-variable">executorType</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.properties.getExecutorType();<br>    <span class="hljs-keyword">if</span> (executorType != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(sqlSessionFactory, executorType);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionTemplate</span>(sqlSessionFactory);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * This will just scan the same base package as Spring Boot does. If you want more power, you can explicitly use</span><br><span class="hljs-comment">   * &#123;<span class="hljs-doctag">@link</span> org.mybatis.spring.annotation.MapperScan&#125; but this will get typed mappers working correctly, out-of-the-box,</span><br><span class="hljs-comment">   * similar to using Spring Data JPA repositories.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfiguredMapperScannerRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span>, ImportBeanDefinitionRegistrar &#123;<br><br>    <span class="hljs-keyword">private</span> BeanFactory beanFactory;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br><br>      <span class="hljs-keyword">if</span> (!AutoConfigurationPackages.has(<span class="hljs-built_in">this</span>.beanFactory)) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Could not determine auto-configuration package, automatic mapper scanning disabled.&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      logger.debug(<span class="hljs-string">&quot;Searching for mappers annotated with @Mapper&quot;</span>);<br><br>      List&lt;String&gt; packages = AutoConfigurationPackages.get(<span class="hljs-built_in">this</span>.beanFactory);<br>      <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>        packages.forEach(pkg -&gt; logger.debug(<span class="hljs-string">&quot;Using auto-configuration base package &#x27;&#123;&#125;&#x27;&quot;</span>, pkg));<br>      &#125;<br><br>      <span class="hljs-type">BeanDefinitionBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);<br>      builder.addPropertyValue(<span class="hljs-string">&quot;processPropertyPlaceHolders&quot;</span>, <span class="hljs-literal">true</span>);<br>      builder.addPropertyValue(<span class="hljs-string">&quot;annotationClass&quot;</span>, Mapper.class);<br>      builder.addPropertyValue(<span class="hljs-string">&quot;basePackage&quot;</span>, StringUtils.collectionToCommaDelimitedString(packages));<br>      <span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">beanWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanWrapperImpl</span>(MapperScannerConfigurer.class);<br>      Stream.of(beanWrapper.getPropertyDescriptors())<br>          <span class="hljs-comment">// Need to mybatis-spring 2.0.2+</span><br>          .filter(x -&gt; x.getName().equals(<span class="hljs-string">&quot;lazyInitialization&quot;</span>)).findAny()<br>          .ifPresent(x -&gt; builder.addPropertyValue(<span class="hljs-string">&quot;lazyInitialization&quot;</span>, <span class="hljs-string">&quot;$&#123;mybatis.lazy-initialization:false&#125;&quot;</span>));<br>      registry.registerBeanDefinition(MapperScannerConfigurer.class.getName(), builder.getBeanDefinition());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> &#123;<br>      <span class="hljs-built_in">this</span>.beanFactory = beanFactory;<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * If mapper registering configuration or mapper scanning configuration not present, this configuration allow to scan</span><br><span class="hljs-comment">   * mappers based on the same component-scanning path as Spring Boot itself.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@org</span>.springframework.context.annotation.Configuration<br>  <span class="hljs-meta">@Import(AutoConfiguredMapperScannerRegistrar.class)</span><br>  <span class="hljs-meta">@ConditionalOnMissingBean(&#123; MapperFactoryBean.class, MapperScannerConfigurer.class &#125;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperScannerRegistrarNotFoundConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> &#123;<br>      logger.debug(<br>          <span class="hljs-string">&quot;Not found configuration for registering mapper bean using @MapperScan, MapperFactoryBean and MapperScannerConfigurer.&quot;</span>);<br>    &#125;<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>首先看一下MybatisAutoConfiguration类上的几个注解：</p><ul><li><p>@org.springframework.context.annotation.Configuration：该注解表明该类是一个配置类，在系统启动时自动解析加载，生成Bean对象放入容器中</p><ul><li>属性值1：value：注入容器中的Bean名称（不赋值默认小驼峰类名称）</li><li>属性值2：proxyBeanMethods：是否单例（默认true）</li></ul></li><li><p>@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })：类条件判断，当有SqlSessionFactory类和SqlSessionFactoryBean类，两个类同时存在时加载</p></li><li><p>@ConditionalOnSingleCandidate(DataSource.class)：单例条件判断，只有容器中只有一个类型的DataSource的Bean定义时才加载</p></li><li><p>@EnableConfigurationProperties(MybatisProperties.class)：加载mybatis属性值</p></li><li><p>@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class })：先完成两个配置类加载后再加载，先后顺序加载判断</p></li></ul><p>根据条件注解判断加载Bean：</p><ul><li>sqlSessionFactory：session工场</li><li>sqlSessionTemplate：session模板方法，session安全处理和事务管理</li><li>mapperScannerRegistrarNotFoundConfiguration：没有MapperFactoryBean和MapperScannerConfigurer两个Bean时加载，同时引入AutoConfiguredMapperSannerRegistrar注册类。<ul><li><strong>当判断@ConditionalOnMissingBean条件类是否满足，满足才会执行@Import注解引入的注册类，否则不会执行引入注册类</strong></li><li><strong>如果没有使用@MapperScan注解和手动配置过MapperFactoryBean、MapperScannerConfigurer配置，会自动扫描启动类所在包路径</strong></li><li>mapperScannerRegistrarNotFoundConfiguration配置中引入了AutoConfiguredMapperScannerRegistrar注册器，该类实现了ImportBeanDefinitionRegistrar接口，在容器启动时会执行registerBeanDefinitions方法</li><li>这个注册器中会注入MapperScannerConfigurer的BeanDifinition进行注册</li></ul></li></ul><h3 id="2、MapperScannerConfigurer-扫描mapper配置类"><a href="#2、MapperScannerConfigurer-扫描mapper配置类" class="headerlink" title="2、MapperScannerConfigurer 扫描mapper配置类"></a>2、MapperScannerConfigurer 扫描mapper配置类</h3><p>MapperScannerConfigurer类实现了BeanDefinitionRegistryPostProcessor接口，而BeanDefinitionRegistryPostProcessor接口继承了BeanFactoryPostProcess接口，在启动的时候，会自动执行postProcessBeanDefinitionRegistry方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.processPropertyPlaceHolders) &#123;<br>    processPropertyPlaceHolders();<br>  &#125;<br><br>  <span class="hljs-type">ClassPathMapperScanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathMapperScanner</span>(registry);<br>  scanner.setAddToConfig(<span class="hljs-built_in">this</span>.addToConfig);<br>  scanner.setAnnotationClass(<span class="hljs-built_in">this</span>.annotationClass);<br>  scanner.setMarkerInterface(<span class="hljs-built_in">this</span>.markerInterface);<br>  scanner.setSqlSessionFactory(<span class="hljs-built_in">this</span>.sqlSessionFactory);<br>  scanner.setSqlSessionTemplate(<span class="hljs-built_in">this</span>.sqlSessionTemplate);<br>  scanner.setSqlSessionFactoryBeanName(<span class="hljs-built_in">this</span>.sqlSessionFactoryBeanName);<br>  scanner.setSqlSessionTemplateBeanName(<span class="hljs-built_in">this</span>.sqlSessionTemplateBeanName);<br>  scanner.setResourceLoader(<span class="hljs-built_in">this</span>.applicationContext);<br>  scanner.setBeanNameGenerator(<span class="hljs-built_in">this</span>.nameGenerator);<br>  scanner.setMapperFactoryBeanClass(<span class="hljs-built_in">this</span>.mapperFactoryBeanClass);<br>  <span class="hljs-keyword">if</span> (StringUtils.hasText(lazyInitialization)) &#123;<br>    scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));<br>  &#125;<br>  scanner.registerFilters();<br>  <span class="hljs-comment">// 扫描mapper接口方法</span><br>  scanner.scan(<br>      StringUtils.tokenizeToStringArray(<span class="hljs-built_in">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));<br>&#125;<br></code></pre></td></tr></table></figure><p>执行扫描的方法是ClassPathMapperScanner#doScan方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title function_">doScan</span><span class="hljs-params">(String... basePackages)</span> &#123;<br>  <span class="hljs-comment">// 执行的是父类ClassPathBeanDefinitionScanner类中的扫描方法</span><br>  Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="hljs-built_in">super</span>.doScan(basePackages);<br><br>  <span class="hljs-keyword">if</span> (beanDefinitions.isEmpty()) &#123;<br>    LOGGER.warn(() -&gt; <span class="hljs-string">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages)<br>        + <span class="hljs-string">&quot;&#x27; package. Please check your configuration.&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 将mapper接口方法全都变成MapperFactoryBean工厂对象</span><br>    processBeanDefinitions(beanDefinitions);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> beanDefinitions;<br>&#125;<br></code></pre></td></tr></table></figure><p>扫描指定目录下的所有mapper接口后，执行bean定义信息处理器方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MapperFactoryBean</span>&gt; mapperFactoryBeanClass = MapperFactoryBean.class;<br><br><span class="hljs-comment">// ===================&gt; 执行bean定义信息处理器 &lt;====================</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBeanDefinitions</span><span class="hljs-params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> &#123;<br>  GenericBeanDefinition definition;<br>  <span class="hljs-keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;<br>    definition = (GenericBeanDefinition) holder.getBeanDefinition();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">beanClassName</span> <span class="hljs-operator">=</span> definition.getBeanClassName();<br>    LOGGER.debug(() -&gt; <span class="hljs-string">&quot;Creating MapperFactoryBean with name &#x27;&quot;</span> + holder.getBeanName() + <span class="hljs-string">&quot;&#x27; and &#x27;&quot;</span> + beanClassName<br>        + <span class="hljs-string">&quot;&#x27; mapperInterface&quot;</span>);<br><br>    <span class="hljs-comment">// the mapper interface is the original class of the bean</span><br>    <span class="hljs-comment">// but, the actual class of the bean is MapperFactoryBean</span><br>    definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); <span class="hljs-comment">// issue #59</span><br>    <br>    <span class="hljs-comment">// ================&gt; 将扫描出来的mapper定义信息设置成mapperFactoryBean &lt;==================</span><br>    definition.setBeanClass(<span class="hljs-built_in">this</span>.mapperFactoryBeanClass);<br><br>    definition.getPropertyValues().add(<span class="hljs-string">&quot;addToConfig&quot;</span>, <span class="hljs-built_in">this</span>.addToConfig);<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">explicitFactoryUsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-built_in">this</span>.sqlSessionFactoryBeanName)) &#123;<br>      definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeBeanReference</span>(<span class="hljs-built_in">this</span>.sqlSessionFactoryBeanName));<br>      explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sqlSessionFactory != <span class="hljs-literal">null</span>) &#123;<br>      definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>, <span class="hljs-built_in">this</span>.sqlSessionFactory);<br>      explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-built_in">this</span>.sqlSessionTemplateBeanName)) &#123;<br>      <span class="hljs-keyword">if</span> (explicitFactoryUsed) &#123;<br>        LOGGER.warn(<br>            () -&gt; <span class="hljs-string">&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;</span>);<br>      &#125;<br>      definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionTemplate&quot;</span>,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeBeanReference</span>(<span class="hljs-built_in">this</span>.sqlSessionTemplateBeanName));<br>      explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sqlSessionTemplate != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (explicitFactoryUsed) &#123;<br>        LOGGER.warn(<br>            () -&gt; <span class="hljs-string">&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;</span>);<br>      &#125;<br>      definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionTemplate&quot;</span>, <span class="hljs-built_in">this</span>.sqlSessionTemplate);<br>      explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!explicitFactoryUsed) &#123;<br>      LOGGER.debug(() -&gt; <span class="hljs-string">&quot;Enabling autowire by type for MapperFactoryBean with name &#x27;&quot;</span> + holder.getBeanName() + <span class="hljs-string">&quot;&#x27;.&quot;</span>);<br>      definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);<br>    &#125;<br>    definition.setLazyInit(lazyInitialization);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在AbstractBeanFactory#doGetBean方法中，获取到mapper接口对应的mapperFactoryBean工厂对象后，根据工厂对象创建mapperProxy代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (mbd.isSingleton()) &#123;<br>sharedInstance = getSingleton(beanName, () -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> createBean(beanName, mbd, args);<br>&#125;<br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br><span class="hljs-comment">// Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="hljs-comment">// eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="hljs-comment">// Also remove any beans that received a temporary reference to the bean.</span><br>destroySingleton(beanName);<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;);<br>    <span class="hljs-comment">// 根据工厂对象获取对象</span><br>bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);<br>&#125;<br></code></pre></td></tr></table></figure><p>业务方法正式调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StudentDao studentDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> studentDao.queryById(id);<br>        studentDao.updateById(String.valueOf(id), <span class="hljs-string">&quot;张三222&quot;</span>);<br>        <span class="hljs-keyword">return</span> student1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250531151230617.png" alt="image-20250531151230617"></p><p>注入的bean对象是代理对象，执行的时候，会进入到MapperProxy代理类中的invoke方法中，然后进入到MapperMethod类中。</p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250531151601515.png" alt="image-20250531151601515"></p><p><img src="/2025/05/24/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/image-20250531151739625.png" alt="image-20250531151739625"></p>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
